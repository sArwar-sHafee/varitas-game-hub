name: Daily Game Generation

on:
  schedule:
    # Runs at 12:00 UTC every day (adjust time as needed)
    - cron: '0 12 * * *'

  # Allow manual trigger from GitHub Actions tab
  workflow_dispatch:
    inputs:
      generate_count:
        description: 'Number of games to generate'
        required: false
        default: '1'
        type: choice
        options:
          - '1'
          - '2'
          - '3'

jobs:
  generate-game:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev libcairo2-dev pkg-config
        sudo apt-get install -y fonts-dejavu-core

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set Gemini API Key
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        echo "API key configured"

    - name: Generate new game(s)
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        # Determine how many games to generate
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          COUNT="${{ github.event.inputs.generate_count }}"
        else
          COUNT="1"
        fi

        echo "Generating $COUNT game(s)..."

        # Modify generate_game.py to use environment variable for API key
        sed -i "s/API_KEY = .*/API_KEY = os.environ.get('GEMINI_API_KEY', 'your-api-key-here')/" generate_game.py

        # Generate the specified number of games
        for i in $(seq 1 $COUNT); do
          echo "Generating game $i of $COUNT..."
          python generate_game.py

          # Add a small delay between generations to avoid rate limits
          if [ $i -lt $COUNT ]; then
            sleep 10
          fi
        done

    - name: Update webpage with new games
      run: |
        python add_game_to_webpage.py

    - name: Get game list
      id: game_list
      run: |
        # List all games and create commit message
        echo "games<<EOF" >> $GITHUB_OUTPUT
        ls -1 games/ 2>/dev/null | head -5 >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        # Count games
        GAME_COUNT=$(ls -1 games/ 2>/dev/null | wc -l || echo "0")
        echo "count=$GAME_COUNT" >> $GITHUB_OUTPUT

    - name: Commit and push changes
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"

        # Add all changes
        git add .

        # Create commit message
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          TRIGGER_TYPE="Manual trigger"
        else
          TRIGGER_TYPE="Daily auto-generation"
        fi

        COMMIT_MSG="ðŸŽ® $TRIGGER_TYPE: Added new game(s) to the hub

Total games: ${{ steps.game_list.outputs.count }}

Recent games:
${{ steps.game_list.outputs.games }}

[Generated by GitHub Actions]"

        # Commit and push if there are changes
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "$COMMIT_MSG"
          git push
          echo "âœ… Changes pushed successfully!"
        fi

    - name: Deploy to GitHub Pages (optional)
      if: success()
      run: |
        echo "Website will be updated automatically if GitHub Pages is enabled"
        echo "URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"

  cleanup-old-games:
    runs-on: ubuntu-latest
    needs: generate-game
    # Only run cleanup once a week (on Sundays)
    if: github.event.schedule == '0 12 * * 0' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Clean up old games (keep last 20)
      run: |
        # Keep only the 20 most recent games
        cd games/
        TOTAL=$(ls -1 | wc -l)

        if [ $TOTAL -gt 20 ]; then
          # Get list of folders to remove (oldest ones)
          TO_REMOVE=$((TOTAL - 20))
          ls -1t | tail -$TO_REMOVE | while read folder; do
            echo "Removing old game: $folder"
            rm -rf "$folder"
          done

          cd ..

          # Update webpage
          pip install beautifulsoup4
          python add_game_to_webpage.py

          # Commit cleanup
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git commit -m "ðŸ§¹ Cleanup: Removed old games (keeping last 20)" || echo "No cleanup needed"
          git push
        else
          echo "No cleanup needed. Total games: $TOTAL"
        fi